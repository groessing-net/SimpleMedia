<?php
/**
 * SimpleMedia.
 *
 * @copyright Erik Spaan & Axel Guckelsberger (ESP)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package SimpleMedia
 * @author Erik Spaan & Axel Guckelsberger <erik@zikula.nl>.
 * @link https://github.com/zikula-ev/SimpleMedia
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.6.2 (http://modulestudio.de).
 */

/**
 * Medium controller class providing navigation and interaction functionality.
 */
class SimpleMedia_Controller_Medium extends SimpleMedia_Controller_Base_Medium
{
    /**
     * Handle view count.
     *
     * @return mixed
     */
    public function display()
    {
        $return = parent::display();

        /** @var SimpleMedia_Entity_Medium $entity */
        $entity = $this->view->get_template_vars('medium');
        if ($this->getVar('countMediumViews', true) && ($entity->getCreatedUserId() != UserUtil::getVar('uid') || UserUtil::isLoggedIn() == false)) {
            $entity->setViewsCount($entity->getViewsCount() + 1);
            $this->entityManager->persist($entity);
            $this->entityManager->flush();
        }

        return $return;
    }












    /**
     * This is a custom method. Documentation for this will be improved in later versions.
     * Upload multiple media in one go from the frontend. Load the template and assign
     * template vaiables
     * OVERRIDE: NOTHING YET
     *
     * @return mixed Output.
     */
    public function multiUpload()
    {
        $this->throwForbiddenUnless(SecurityUtil::checkPermission($this->name . ':Medium:', '::', ACCESS_OVERVIEW), LogUtil::getErrorMsgPermission());
        /** TODO: custom logic */

        // Add template variables like the collection to store the media in
        // default collection, but this should also be callable from a collection as action,
        // so getting the collection as parameter

        // Requested collection for store or choose from list with defaultCollection as default
        $selectedCollection = (int)$this->request->query->filter('collection', ModUtil::getVar('SimpleMedia', 'defaultCollection', 1), FILTER_SANITIZE_NUMBER_INT);

        // Obtain the list of available collection for storing the media
        $allCollections = ModUtil::apiFunc('SimpleMedia', 'selection', 'getEntities', array('ot' => 'collection', 'orderBy' => 'lvl', 'useJoins' => false, 'slimMode' => false));
        $collectionItems = array();
        foreach ($allCollections as $collection) {
            // prefix the title with level
            $prefix = '';
            for ($i=0; $i<$collection['lvl']; $i++) {
                $prefix .= '--';
            }
            $prefix .= ' ';
            $collectionItems[] = array(
                'value' => $collection['id'],
                'text' => $prefix . $collection['title']
            );
        }
        $this->view->assign('collectionItems', $collectionItems);
        $this->view->assign('selectedCollection', $selectedCollection);

        // parameter for categories to store for the uploaded media
        // $category = $this->request->query->filter('category', '', FILTER_SANITIZE_STRING);

        // return template
        return $this->view->display('medium/multiUpload.tpl');
    }

    /**
     * This is a custom method. Documentation for this will be improved in later versions.
     * Store the chosen media from the multiUpload template.
     * NEW method
     *
     * @return mixed Output.
     */
    public function multiUploadSave()
    {
        $this->throwForbiddenUnless(SecurityUtil::checkPermission($this->name . ':Medium:', '::', ACCESS_OVERVIEW), LogUtil::getErrorMsgPermission());

        new SimpleMedia_JQueryFileUploadUploadHandler();

        return true;
    }

    public function multiUploadMove()
    {
        $this->throwForbiddenUnless(SecurityUtil::checkPermission($this->name . ':Medium:', '::', ACCESS_OVERVIEW), LogUtil::getErrorMsgPermission());

        $uploadHandler = new SimpleMedia_JQueryFileUploadUploadHandler(null, false);
        $files = $uploadHandler->get(false);
        $files = $files['files'];

        if (count($files) == 0) {
            return $this->redirect(ModUtil::url($this->name, 'collection', 'main'));
        }

        $workflowHelper = new SimpleMedia_Util_Workflow($this->getServiceManager());

        // submitted collection to store media in
        $collection = $this->request->request->get('collectionStore', $collection = $this->getVar('defaultCollection', 1));
        if ($collection == -1) {
            // Create new collection.
            $collectionEntity = new SimpleMedia_Entity_Collection();
            $collectionEntity->setTitle($this->request->request->get('collectionStoreTitle', null));
            $collectionEntity->setDescription($this->request->request->get('collectionStoreDescription', null));
            $collectionEntity->setWorkflowState('approved');

            $workflowHelper->executeAction($collectionEntity, 'submit');
        } else {
            $collectionEntity = ModUtil::apiFunc($this->name, 'selection', 'getEntity', array('ot' => 'collection', 'id' => $collection));
        }

        // For each file, handle it
        $uploadField = 'theFile';
        foreach ($files as $file) {
            $formData[$uploadField] = array(
                'tmp_name' => $file->path,
                'name' => $file->name,
                'error' => '0'
            );

            // First create medium
            $medium = new SimpleMedia_Entity_Medium();
            $medium->setTitle($file->name);
            $medium->setCollection($collectionEntity);

            $uploadManager = new SimpleMedia_UploadHandler();
            // do the actual upload (includes validation, physical file processing and reading meta data)
            $uploadResult = $uploadManager->performFileUpload('medium', $formData, $uploadField);
            // assign the upload file name
            $medium->setTheFile($uploadResult['fileName']);
            // assign the basic meta data
            $medium->setTheFileMeta($uploadResult['metaData']);

            // assign the meta tags from getID3
            $metaData = new SimpleMedia_Entity_MediumMetaData($medium);
            $metaData->merge(array('metaTags' => $uploadResult['metaTags']));
            $medium->setMetadata($metaData);

            // workflow approve
            $medium->setWorkflowState('approved');

            $workflowHelper->executeAction($medium, 'submit');
        }

        return $this->redirect(ModUtil::url($this->name, 'collection', 'view', array('id' => $collectionEntity->getId())));
    }
}
