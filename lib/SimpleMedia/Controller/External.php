<?php
/**
 * SimpleMedia.
 *
 * @copyright Erik Spaan & Axel Guckelsberger (ZKM)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package SimpleMedia
 * @author Erik Spaan & Axel Guckelsberger <erik@zikula.nl>.
 * @link https://github.com/zikula-ev/SimpleMedia
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.6.1 (http://modulestudio.de).
 */

/**
 * Controller for external calls implementation class.
 */
class SimpleMedia_Controller_External extends SimpleMedia_Controller_Base_External
{
    // feel free to extend the external controller here

    /**
     * Popup selector for Scribite plugins.
     * Finds items of a certain object type.
	 * OVERRIDE: enabled ckeditor plugin functionality
     *
     * @param string $objectType The object type.
     * @param string $editor     Name of used Scribite editor.
     * @param string $sort       Sorting field.
     * @param string $sortdir    Sorting direction.
     * @param int    $pos        Current pager position.
     * @param int    $num        Amount of entries to display.
     *
     * @return output The external item finder page
     */
    public function finder()
    {
        PageUtil::addVar('stylesheet', ThemeUtil::getModuleStylesheet('SimpleMedia'));
    
        $getData = $this->request->query;
        $controllerHelper = new SimpleMedia_Util_Controller($this->serviceManager);
    
        $objectType = $getData->filter('objectType', 'medium', FILTER_SANITIZE_STRING);
        $utilArgs = array('controller' => 'external', 'action' => 'finder');
        if (!in_array($objectType, $controllerHelper->getObjectTypes('controller', $utilArgs))) {
            $objectType = $controllerHelper->getDefaultObjectType('controllerType', $utilArgs);
        }
    
        $this->throwForbiddenUnless(SecurityUtil::checkPermission('SimpleMedia:' . ucwords($objectType) . ':', '::', ACCESS_COMMENT), LogUtil::getErrorMsgPermission());
    
        $entityClass = 'SimpleMedia_Entity_' . ucwords($objectType);
        $repository = $this->entityManager->getRepository($entityClass);
        $repository->setControllerArguments(array());
    
        $editor = $getData->filter('editor', '', FILTER_SANITIZE_STRING);
        if (empty($editor) || !in_array($editor, array('xinha', 'tinymce', 'ckeditor'))) {
            return $this->__('Error: Invalid editor context given for external controller action.');
        }
    
        // fetch selected categories to reselect them in the output
        // the actual filtering is done inside the repository class
        $categoryIds = ModUtil::apiFunc('SimpleMedia', 'category', 'retrieveCategoriesFromRequest', array('ot' => $objectType, 'source' => 'GET'));
        $sort = $getData->filter('sort', '', FILTER_SANITIZE_STRING);
        if (empty($sort) || !in_array($sort, $repository->getAllowedSortingFields())) {
            $sort = $repository->getDefaultSortingField();
        }
    
        $sortdir = $getData->filter('sortdir', '', FILTER_SANITIZE_STRING);
        $sdir = strtolower($sortdir);
        if ($sdir != 'asc' && $sdir != 'desc') {
            $sdir = 'asc';
        }
    
        $sortParam = $sort . ' ' . $sdir;
    
        // the current offset which is used to calculate the pagination
        $currentPage = (int) $getData->filter('pos', 1, FILTER_VALIDATE_INT);
    
        // the number of items displayed on a page for pagination
        $resultsPerPage = (int) $getData->filter('num', 0, FILTER_VALIDATE_INT);
        if ($resultsPerPage == 0) {
            $resultsPerPage = $this->getVar('pageSize', 20);
        }

		// how to display the images
		$displayimagesas = $getData->filter('displayimagesas', '', FILTER_SANITIZE_STRING);
        $displayimagesas = strtolower($displayimagesas);
        if ($displayimagesas != 'list' && $displayimagesas != 'thumbnails') {
            $displayimagesas = 'thumbnails';
        }    

		$showmetaname = $getData->filter('showmetaname', '1', FILTER_SANITIZE_STRING);
		$showmetasize = $getData->filter('showmetasize', '0', FILTER_SANITIZE_STRING);
		$showmetadate = $getData->filter('showmetadate', '0', FILTER_SANITIZE_STRING);

        $where = '';
        list($entities, $objectCount) = $repository->selectWherePaginated($where, $sortParam, $currentPage, $resultsPerPage);
    
        foreach ($entities as $k => $entity) {
            $entity->initWorkflow();
        }
    
        $view = Zikula_View::getInstance('SimpleMedia', false);
    
        $view->assign('editorName', $editor)
             ->assign('objectType', $objectType)
             ->assign('items', $entities)
             ->assign('sort', $sort)
             ->assign('sortdir', $sdir)
             ->assign('displayimagesas', $displayimagesas)
             ->assign('showmetaname', $showmetaname)
             ->assign('showmetasize', $showmetasize)
             ->assign('showmetadate', $showmetadate)
             ->assign('currentPage', $currentPage)
             ->assign('pager', array('numitems'     => $objectCount,
                                     'itemsperpage' => $resultsPerPage));
    
        // assign category properties
        $properties = null;
        if (in_array($objectType, $this->categorisableObjectTypes)) {
            $properties = ModUtil::apiFunc('SimpleMedia', 'category', 'getAllProperties', array('ot' => $objectType));
        }
        $view->assign('properties', $properties)
             ->assign('catIds', $categoryIds);
    
        return $view->display('external/' . $objectType . '/find.tpl');
    }
}	
