<?php
/**
 * SimpleMedia.
 *
 * @copyright Erik Spaan & Axel Guckelsberger (ESP)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package SimpleMedia
 * @author Erik Spaan & Axel Guckelsberger <erik@zikula.nl>.
 * @link https://github.com/zikula-ev/SimpleMedia
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.6.2 (http://modulestudio.de).
 */

/**
 * Collection controller class providing navigation and interaction functionality.
 */
class SimpleMedia_Controller_Collection extends SimpleMedia_Controller_Base_Collection
{
    public function view()
    {
        return parent::view();

        // @todo Only show root collections.
    }

    /**
     * Handle view count.
     *
     * @return mixed
     */
    public function display()
    {
        $return = parent::display();
        /** @var SimpleMedia_Entity_Collection $entity */
        $entity = $this->view->get_template_vars('collection');
        if ($this->getVar('countCollectionViews', true) && ($entity->getCreatedUserId() != UserUtil::getVar('uid') || UserUtil::isLoggedIn() == false)) {
            $entity->setViewsCount($entity->getViewsCount() + 1);
            $this->entityManager->persist($entity);
            $this->entityManager->flush();
        }

        return $return;
    }









    /**
     * This is a custom method.
     * Add a new collection directly from the frontend. Methods from Ajax.php
     *
     * @return mixed Output.
     */
    public function addCollection()
    {
        $this->throwForbiddenUnless(SecurityUtil::checkPermission($this->name . ':Collection:', '::', ACCESS_ADD), LogUtil::getErrorMsgPermission());

        // check for parentId, which means that a child collection is added
        $parentId = (int) $this->request->query->filter('pid', 0, FILTER_SANITIZE_NUMBER_INT);

        $addChild = ($parentId > 0);
        $addRoot = ($parentId == 0);

        $entityClass = 'SimpleMedia_Entity_Collection';
        $repository = $this->entityManager->getRepository($entityClass);

        $titleFieldName = 'title';
        $descriptionFieldName = 'description';

        if ($addRoot) {
            // Root collection being added
            $entity = new $entityClass();
            $entityData = array();
            if (!empty($titleFieldName)) {
                $entityData[$titleFieldName] = $this->__('New root node');
            }
            if (!empty($descriptionFieldName)) {
                $entityData[$descriptionFieldName] = $this->__('This is a new root node');
            }
            $entity->merge($entityData);

            // save new object to set the root id
            $action = 'submit';
            try {
                // execute the workflow action
                $workflowHelper = new SimpleMedia_Util_Workflow($this->serviceManager);
                $success = $workflowHelper->executeAction($entity, $action);
            } catch(\Exception $e) {
                LogUtil::registerError($this->__f('Sorry, but an unknown error occured during the %s action. Please apply the changes again!', array($action)));
            }
            $this->entityManager->persist($entity);
            $this->entityManager->flush();
        } elseif ($addChild) {
            // Child collection being added to parent
            $childEntity = new $entityClass();
            $entityData = array();
            $entityData[$titleFieldName] = $this->__('New child node');
            if (!empty($descriptionFieldName)) {
                $entityData[$descriptionFieldName] = $this->__('This is a new child node');
            }
            $childEntity->merge($entityData);

            // save new object
            $action = 'submit';
            try {
                // execute the workflow action
                $workflowHelper = new SimpleMedia_Util_Workflow($this->serviceManager);
                $success = $workflowHelper->executeAction($childEntity, $action);
            } catch(\Exception $e) {
                LogUtil::registerError($this->__f('Sorry, but an unknown error occured during the %s action. Please apply the changes again!', array($action)));
            }

            //$childEntity->setParent($parentEntity);
            $parentEntity = ModUtil::apiFunc($this->name, 'selection', 'getEntity', array('ot' => 'collection', 'id' => $parentId, 'useJoins' => false));
            if ($parentEntity == null) {
                return new Zikula_Response_Ajax_NotFound($this->__('No such item.'));
            }
            $repository->persistAsLastChildOf($childEntity, $parentEntity);
            $this->entityManager->flush();
        }

        if ($addChild) {
            // redirect to parent of the new child collection
            return $this->redirect(ModUtil::url($this->name, 'collection', 'display', array('id' => $parentId)));
        } else {
            // redirect to collection view
            return $this->redirect(ModUtil::url($this->name, 'collection', 'view'));
        }
    }
}
