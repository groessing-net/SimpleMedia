<?php
/**
 * SimpleMedia.
 *
 * @copyright Erik Spaan & Axel Guckelsberger (ESP)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package SimpleMedia
 * @author Erik Spaan & Axel Guckelsberger <erik@zikula.nl>.
 * @link https://github.com/zikula-ev/SimpleMedia
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.6.1 (http://modulestudio.de).
 */

/**
 * Tree selector.
 *
 * This plugin creates a nested tree selector using a dropdown list.
 * The selected value of the base dropdown list will be set to ID of the selected tree node.
 */
class SimpleMedia_Form_Plugin_Base_TreeSelector extends SimpleMedia_Form_Plugin_AbstractObjectSelector
{
    /**
     * Root node id (when using multiple roots).
     *
     * @var integer
     */
    public $root;

    /**
     * Whether leaf nodes should be included or not.
     *
     * @var boolean
     */
    public $includeLeafNodes = true;

    /**
     * Whether the root node should be included or not.
     *
     * @var boolean
     */
    public $includeRootNode = false;

    /**
     * Reference to the tree repository.
     *
     * @var Doctrine\ORM\EntityRepository
     */
    public $repository = null;

    /**
     * Get filename of this file.
     *
     * @return string
     */
    public function getFilename()
    {
        return __FILE__;
    }

    /**
     * Create event handler.
     *
     * @param Zikula_Form_View $view    Reference to Zikula_Form_View object.
     * @param array            &$params Parameters passed from the Smarty plugin function.
     *
     * @see    Zikula_Form_Plugin
     * @return void
     */
    public function create($view, &$params)
    {
        $this->root = (isset($params['root']) && is_numeric($params['root']) && $params['root'] > 0) ? $params['root'] : 1;
        $this->includeLeafNodes = isset($params['includeLeaf']) ? $params['includeLeaf'] : true;
        $this->includeRootNode = isset($params['includeRoot']) ? $params['includeRoot'] : false;

        parent::create($view, $params);

        $entityClass = $this->name . '_Entity_' . ucwords($this->objectType);
        $serviceManager = ServiceUtil::getManager();
        $entityManager = $serviceManager->getService('doctrine.entitymanager');
        $this->repository = $entityManager->getRepository($entityClass);
    }

    /**
     * Entry point for customised css class.
     */
    protected function getStyleClass()
    {
        return 'z-form-nestedsetlist';
    }

    /**
     * Performs the actual data selection.
     *
     * @param array &$params Parameters passed from the Smarty plugin function.
     *
     * @return array List of selected objects.
     */
    protected function loadItems(&$params)
    {
        $apiArgs = array('ot' => $this->objectType
                         'rootId' => $this->root);
        $treeNodes = ModUtil::apiFunc($this->name, 'selection', 'getTree', $apiArgs);
        if (!$treeNodes) {
            return array();
        }

        return $treeNodes;
    }

    /**
     * Determines whether a certain list item should be included or not.
     * Allows to exclude undesired items after the selection has happened.
     *
     * @param Doctrine\ORM\Entity $item The treated entity.
     *
     * @return boolean Whether this entity should be included into the list.
     */
    protected function isIncluded($item)
    {
        $nodeLevel = $item->getLvl();

        if (!$this->includeRootNode && $nodeLevel == 0) {
            // if we do not include the root node skip it
            return false;
        }

        if (!$this->includeLeafNodes && $this->repository->childCount($item) == 0) {
            // if we do not include leaf nodes skip them
            return false;
        }

        return true;
    }

    /**
     * Calculates the label for a certain list item.
     *
     * @param Doctrine\ORM\Entity $item The treated entity.
     *
     * @return string The created label string.
     */
    protected function createItemLabel($item)
    {
        // determine current list hierarchy level depending on root node inclusion
        $shownLevel = $item->getLvl();
        if (!$this->includeRootNode) {
            $shownLevel--;
        }
        $prefix = str_repeat('- - ', $shownLevel);

        $itemLabel = $prefix . parent::createItemLabel($item);

        return $itemLabel;
    }
}
