<?php
/**
 * SimpleMedia.
 *
 * @copyright Axel Guckelsberger
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package SimpleMedia
 * @author Axel Guckelsberger <info@guite.de>.
 * @link http://zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.5 (http://modulestudio.de) at Mon Nov 05 23:27:06 CET 2012.
 */

/**
 * Upload handler implementation class.
 */
class SimpleMedia_UploadHandler extends SimpleMedia_Base_UploadHandler
{
    // feel free to add your upload handler enhancements here

    /**
     * @var array List of file types to be considered as movies.
     */
    protected $movieFileTypes;

    /**
     * @var array List of file types to be considered as audio.
     */
    protected $audioFileTypes;

    /**
     * @var array List of file types to be considered as documents.
     */
    protected $documentFileTypes;

    /**
     * Constructor initialising the supported object types.
     */
    public function __construct()
    {
        parent::__construct();
        
        // see for instance http://en.wikipedia.org/wiki/List_of_file_formats
        $this->imageFileTypes = array('gif', 'jpeg', 'jpg', 'png', 'tif', 'tiff', 'bmp'); // raster images
        $this->audioFileTypes = array('aac', 'mp3', 'wav', 'aif', 'mid');
        $this->movieFileTypes = array('mpg', 'mpeg', 'mp4', 'mov', 'wmv', 'avi', 'swf', 'flv', 'rm', 'f4v', 'h264');

        $otherimageFileTypes = array('psd', 'eps', 'ps', 'ai', 'svg', 'odg', 'emf', 'dwg', 'dxf');
        $ebookFileTypes = array('epub', 'mobi');
        $camerarawFileTypes = array('dng', 'cr2', 'nef');
        $geoFileTypes = array('kml', 'gpx');
        $dtpFileTypes = array('qxd', 'fm', 'indd');
        $this->documentFileTypes = array_merge(
            array('pdf', 'doc', 'xls', 'ppt', 'docx', 'xlsx', 'pptx', 'odt', 'ods', 'odp', 'pages', 'numbers', 'key', 'keynote', 'txt', 'rtf', 'csv', 'tex'), 
            $otherimageFileTypes, $ebookFileTypes, $camerarawFileTypes, $geoFileTypes, $dtpFileTypes
        );
        
        // zip and other package files will go into other
    }


    /**
     * Determines the allowed file extensions for a given object type.
     *
     * @param string $objectType Currently treated entity type.
     * @param string $fieldName  Name of upload field.
     * @param string $extension  Input file extension.
     *
     * @return array the list of allowed file extensions
     */
    protected function isAllowedFileExtension($objectType, $fieldName, $extension)
    {
        // determine the allowed extensions
        $allowedExtensions = array();
        switch ($objectType) {
            case 'medium':
                $allowedExtensions = explode(',', str_replace(' ', '', ModUtil::getVar('SimpleMedia', 'allowedExtensions')));
                    break;
        }
    
        if (count($allowedExtensions) > 0) {
            if (!in_array($extension, $allowedExtensions)) {
                return false;
            }
        }
    
        // check explicit for forbidden (executable) types 
        if (in_array($extension, $this->forbiddenFileTypes)) {
            return false;
        }
    
        return true;
    }
}
