<?php
/**
 * SimpleMedia.
 *
 * @copyright Axel Guckelsberger
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package SimpleMedia
 * @author Axel Guckelsberger <info@guite.de>.
 * @link http://zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.5 (http://modulestudio.de) at Mon Nov 05 23:27:04 CET 2012.
 */

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Gedmo\Mapping\Annotation as Gedmo;
use DoctrineExtensions\StandardFields\Mapping\Annotation as ZK;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for collection entities.
 *
 * @abstract
 */
abstract class SimpleMedia_Entity_Base_Collection extends Zikula_EntityAccess
{
    /**
     * @var string The tablename this object maps to
     */
    protected $_objectType = 'collection';
    
    /**
     * @var array List of primary key field names
     */
    protected $_idFields = array();
    
    /**
     * @var SimpleMedia_Entity_Validator_Collection The validator for this entity
     */
    protected $_validator = null;
    
    /**
     * @var boolean Whether this entity supports unique slugs
     */
    protected $_hasUniqueSlug = false;
    
    /**
     * @var array List of available item actions
     */
    protected $_actions = array();
    
    /**
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     * @ORM\Column(type="integer", unique=true)
     * @var integer $id.
     */
    protected $id = 0;
    
    /**
     * REMOVED Translatable See https://github.com/Guite/MostGenerator/issues/226
     * @ORM\Column(length=255)
     * @var string $title.
     */
    protected $title = '';
    
    /**
     * REMOVED Translatable See https://github.com/Guite/MostGenerator/issues/226
     * @ORM\Column(type="text", length=2000)
     * @var text $description.
     */
    protected $description = '';
    
    /**
     * @ORM\Column(type="bigint")
     * @var bigint $previewImage.
     */
    protected $previewImage = 0;
    
    /**
     * @ORM\Column(type="bigint")
     * @var bigint $sortValue.
     */
    protected $sortValue = 0;
    
    
    /**
     * Field for storing the locale of this entity.
     * Overrides the locale set in translationListener (as pointed out in https://github.com/l3pp4rd/DoctrineExtensions/issues/130#issuecomment-1790206 ).
     *
     * @Gedmo\Locale
     * @var string $locale.
     */
    protected $locale;
    
    /**
     * @Gedmo\TreeLeft
     * @ORM\Column(type="integer")
     * @var integer $lft.
     */
    protected $lft;
    
    /**
     * @Gedmo\TreeLevel
     * @ORM\Column(type="integer")
     * @var integer $lvl.
     */
    protected $lvl;
    
    /**
     * @Gedmo\TreeRight
     * @ORM\Column(type="integer")
     * @var integer $rgt.
     */
    protected $rgt;
    
    /**
     * @Gedmo\TreeRoot
     * @ORM\Column(type="integer", nullable=true)
     * @var integer $root.
     */
    protected $root;
    
    /**
     * Bidirectional - Many children [collection] are linked by one parent [collection] (OWNING SIDE).
     *
     * @Gedmo\TreeParent
     * @ORM\ManyToOne(targetEntity="SimpleMedia_Entity_Collection", inversedBy="children")
     * @ORM\JoinColumn(name="parent_id", referencedColumnName="id", onDelete="SET NULL")
     * @var SimpleMedia_Entity_Collection $parent.
     */
    protected $parent;
    
    /**
     * Bidirectional - One parent [collection] has many children [collection] (INVERSE SIDE).
     *
     * @ORM\OneToMany(targetEntity="SimpleMedia_Entity_Collection", mappedBy="parent")
     * @ORM\OrderBy({"lft" = "ASC"})
     * @var SimpleMedia_Entity_Collection $children.
     */
    protected $children;
    
    /**
     * @ORM\OneToMany(targetEntity="SimpleMedia_Entity_CollectionCategory", 
     *                mappedBy="entity", cascade={"all"}, 
     *                orphanRemoval=true, indexBy="categoryRegistryId")
     * @var SimpleMedia_Entity_CollectionCategory
     */
    protected $categories;
    
    /**
     * @ORM\Column(type="integer")
     * @ZK\StandardFields(type="userid", on="create")
     * @var integer $createdUserId.
     */
    protected $createdUserId;
    
    /**
     * @ORM\Column(type="integer")
     * @ZK\StandardFields(type="userid", on="update")
     * @var integer $updatedUserId.
     */
    protected $updatedUserId;
    
    /**
     * @ORM\Column(type="datetime")
     * @Gedmo\Timestampable(on="create")
     * @var datetime $createdDate.
     */
    protected $createdDate;
    
    /**
     * @ORM\Column(type="datetime")
     * @Gedmo\Timestampable(on="update")
     * @var datetime $updatedDate.
     */
    protected $updatedDate;
    
    /**
     * Bidirectional - One collection [collection] has many media [media] (INVERSE SIDE).
     *
     * @ORM\OneToMany(targetEntity="SimpleMedia_Entity_Medium", mappedBy="collection")
     * @ORM\JoinTable(name="simmed_collectionmedia",
             *      joinColumns={@ORM\JoinColumn(name="id", referencedColumnName="id" , unique=true, nullable=false)
             },
             *      inverseJoinColumns={@ORM\JoinColumn(name="id", referencedColumnName="id" , unique=true, nullable=false)
            }
             * )
     * @var SimpleMedia_Entity_Medium[] $media.
     */
    protected $media = null;
    
    
    /**
     * Constructor.
     * Will not be called by Doctrine and can therefore be used
     * for own implementation purposes. It is also possible to add
     * arbitrary arguments as with every other class method.
     *
     * @param TODO
     */
    public function __construct()
    {
        $this->id = 1;
        $this->_idFields = array('id');
        $this->initValidator();
        $this->_hasUniqueSlug = false;
        $this->media = new ArrayCollection();
        $this->categories = new Doctrine\Common\Collections\ArrayCollection();
    }
    
    /**
     * Get _object type.
     *
     * @return string
     */
    public function get_objectType()
    {
        return $this->_objectType;
    }
    
    /**
     * Set _object type.
     *
     * @param string $_objectType.
     *
     * @return void
     */
    public function set_objectType($_objectType)
    {
        $this->_objectType = $_objectType;
    }
    
    /**
     * Get _id fields.
     *
     * @return array
     */
    public function get_idFields()
    {
        return $this->_idFields;
    }
    
    /**
     * Set _id fields.
     *
     * @param array $_idFields.
     *
     * @return void
     */
    public function set_idFields(array $_idFields = Array())
    {
        $this->_idFields = $_idFields;
    }
    
    /**
     * Get _validator.
     *
     * @return SimpleMedia_Entity_Validator_Collection
     */
    public function get_validator()
    {
        return $this->_validator;
    }
    
    /**
     * Set _validator.
     *
     * @param SimpleMedia_Entity_Validator_Collection $_validator.
     *
     * @return void
     */
    public function set_validator(SimpleMedia_Entity_Validator_Collection $_validator = null)
    {
        $this->_validator = $_validator;
    }
    
    /**
     * Get _has unique slug.
     *
     * @return boolean
     */
    public function get_hasUniqueSlug()
    {
        return $this->_hasUniqueSlug;
    }
    
    /**
     * Set _has unique slug.
     *
     * @param boolean $_hasUniqueSlug.
     *
     * @return void
     */
    public function set_hasUniqueSlug($_hasUniqueSlug)
    {
        $this->_hasUniqueSlug = $_hasUniqueSlug;
    }
    
    /**
     * Get _actions.
     *
     * @return array
     */
    public function get_actions()
    {
        return $this->_actions;
    }
    
    /**
     * Set _actions.
     *
     * @param array $_actions.
     *
     * @return void
     */
    public function set_actions(array $_actions = Array())
    {
        $this->_actions = $_actions;
    }
    
    
    /**
     * Get id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }
    
    /**
     * Set id.
     *
     * @param integer $id.
     *
     * @return void
     */
    public function setId($id)
    {
        if ($id != $this->id) {
            $this->id = $id;
        }
    }
    
    /**
     * Get title.
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }
    
    /**
     * Set title.
     *
     * @param string $title.
     *
     * @return void
     */
    public function setTitle($title)
    {
        if ($title != $this->title) {
            $this->title = $title;
        }
    }
    
    /**
     * Get description.
     *
     * @return text
     */
    public function getDescription()
    {
        return $this->description;
    }
    
    /**
     * Set description.
     *
     * @param text $description.
     *
     * @return void
     */
    public function setDescription($description)
    {
        if ($description != $this->description) {
            $this->description = $description;
        }
    }
    
    /**
     * Get preview image.
     *
     * @return bigint
     */
    public function getPreviewImage()
    {
        return $this->previewImage;
    }
    
    /**
     * Set preview image.
     *
     * @param bigint $previewImage.
     *
     * @return void
     */
    public function setPreviewImage($previewImage)
    {
        if ($previewImage != $this->previewImage) {
            $this->previewImage = $previewImage;
        }
    }
    
    /**
     * Get sort value.
     *
     * @return bigint
     */
    public function getSortValue()
    {
        return $this->sortValue;
    }
    
    /**
     * Set sort value.
     *
     * @param bigint $sortValue.
     *
     * @return void
     */
    public function setSortValue($sortValue)
    {
        if ($sortValue != $this->sortValue) {
            $this->sortValue = $sortValue;
        }
    }
    
    /**
     * Get lft.
     *
     * @return integer
     */
    public function getLft()
    {
        return $this->lft;
    }
    
    /**
     * Set lft.
     *
     * @param integer $lft.
     *
     * @return void
     */
    public function setLft($lft)
    {
        $this->lft = $lft;
    }
    
    /**
     * Get lvl.
     *
     * @return integer
     */
    public function getLvl()
    {
        return $this->lvl;
    }
    
    /**
     * Set lvl.
     *
     * @param integer $lvl.
     *
     * @return void
     */
    public function setLvl($lvl)
    {
        $this->lvl = $lvl;
    }
    
    /**
     * Get rgt.
     *
     * @return integer
     */
    public function getRgt()
    {
        return $this->rgt;
    }
    
    /**
     * Set rgt.
     *
     * @param integer $rgt.
     *
     * @return void
     */
    public function setRgt($rgt)
    {
        $this->rgt = $rgt;
    }
    
    /**
     * Get root.
     *
     * @return integer
     */
    public function getRoot()
    {
        return $this->root;
    }
    
    /**
     * Set root.
     *
     * @param integer $root.
     *
     * @return void
     */
    public function setRoot($root)
    {
        $this->root = $root;
    }
    
    /**
     * Get parent.
     *
     * @return SimpleMedia_Entity_Collection
     */
    public function getParent()
    {
        return $this->parent;
    }
    
    /**
     * Set parent.
     *
     * @param SimpleMedia_Entity_Collection $parent.
     *
     * @return void
     */
    public function setParent(SimpleMedia_Entity_Collection $parent = null)
    {
        $this->parent = $parent;
    }
    
    /**
     * Get children.
     *
     * @return array
     */
    public function getChildren()
    {
        return $this->children;
    }
    
    /**
     * Set children.
     *
     * @param array $children.
     *
     * @return void
     */
    public function setChildren($children)
    {
        $this->children = $children;
    }
    
    /**
     * Get locale.
     *
     * @return string
     */
    public function getLocale()
    {
        return $this->locale;
    }
    
    /**
     * Set locale.
     *
     * @param string $locale.
     *
     * @return void
     */
    public function setLocale($locale)
    {
        $this->locale = $locale;
    }
    
    /**
     * Get categories.
     *
     * @return array
     */
    public function getCategories()
    {
        return $this->categories;
    }
    
    /**
     * Set categories.
     *
     * @param array $categories.
     *
     * @return void
     */
    public function setCategories($categories)
    {
        $this->categories = $categories;
    }
    
    /**
     * Get created user id.
     *
     * @return integer[]
     */
    public function getCreatedUserId()
    {
        return $this->createdUserId;
    }
    
    /**
     * Set created user id.
     *
     * @param integer[] $createdUserId.
     *
     * @return void
     */
    public function setCreatedUserId($createdUserId)
    {
        $this->createdUserId = $createdUserId;
    }
    
    /**
     * Get updated user id.
     *
     * @return integer[]
     */
    public function getUpdatedUserId()
    {
        return $this->updatedUserId;
    }
    
    /**
     * Set updated user id.
     *
     * @param integer[] $updatedUserId.
     *
     * @return void
     */
    public function setUpdatedUserId($updatedUserId)
    {
        $this->updatedUserId = $updatedUserId;
    }
    
    /**
     * Get created date.
     *
     * @return datetime[]
     */
    public function getCreatedDate()
    {
        return $this->createdDate;
    }
    
    /**
     * Set created date.
     *
     * @param datetime[] $createdDate.
     *
     * @return void
     */
    public function setCreatedDate($createdDate)
    {
        $this->createdDate = $createdDate;
    }
    
    /**
     * Get updated date.
     *
     * @return datetime[]
     */
    public function getUpdatedDate()
    {
        return $this->updatedDate;
    }
    
    /**
     * Set updated date.
     *
     * @param datetime[] $updatedDate.
     *
     * @return void
     */
    public function setUpdatedDate($updatedDate)
    {
        $this->updatedDate = $updatedDate;
    }
    
    
    /**
     * Get media.
     *
     * @return SimpleMedia_Entity_Medium[]
     */
    public function getMedia()
    {
        return $this->media;
    }
    
    /**
     * Set media.
     *
     * @param SimpleMedia_Entity_Medium[] $media.
     *
     * @return void
     */
    public function setMedia($media)
    {
    }
    
    /**
     * Adds an instance of SimpleMedia_Entity_Medium to the list of media.
     *
     * @param SimpleMedia_Entity_Medium $medium
     .
     *
     * @return void
     */
    public function addMedia(SimpleMedia_Entity_Medium $medium
    )
    {
        $this->media[] = $medium;
        $medium->setCollection($this);
    }
    
    /**
     * Removes an instance of SimpleMedia_Entity_Medium from the list of media.
     *
     * @param SimpleMedia_Entity_Medium $medium.
     *
     * @return void
     */
    public function removeMedia(SimpleMedia_Entity_Medium $medium)
    {
        $this->media->removeElement($medium);
        $medium->setCollection(null);
    }
    
    
    /**
     * Initialise validator and return it's instance.
     *
     * @return SimpleMedia_Entity_Validator_Collection The validator for this entity.
     */
    public function initValidator()
    {
        if (!is_null($this->_validator)) {
            return $this->_validator;
        }
        $this->_validator = new SimpleMedia_Entity_Validator_Collection($this);
        return $this->_validator;
    }
    
    /**
     * Start validation and raise exception if invalid data is found.
     *
     * @return void.
     * @throws Zikula_Exception
     */
    public function validate()
    {
        $result = $this->initValidator()->validateAll();
        if (is_array($result)) {
            throw new Zikula_Exception($result['message'], $result['code'], $result['debugArray']);
        }
    }
    
    /**
     * Return entity data in JSON format.
     *
     * @return string JSON-encoded data.
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }
    
    /**
     * Collect available actions for this entity.
     */
    protected function prepareItemActions()
    {
        if (!empty($this->_actions)) {
            return;
        }
    
        $currentType = FormUtil::getPassedValue('type', 'user', 'GETPOST', FILTER_SANITIZE_STRING);
        $currentFunc = FormUtil::getPassedValue('func', 'main', 'GETPOST', FILTER_SANITIZE_STRING);
        $dom = ZLanguage::getModuleDomain('SimpleMedia');
        if ($currentType == 'admin') {
            if (in_array($currentFunc, array('main', 'view'))) {
                $this->_actions[] = array(
                    'url' => array('type' => 'user', 'func' => 'display', 'arguments' => array('ot' => 'collection', 'id' => $this['id'])),
                    'icon' => 'preview',
                    'linkTitle' => __('Open preview page', $dom),
                    'linkText' => __('Preview', $dom)
                );
                $this->_actions[] = array(
                    'url' => array('type' => 'admin', 'func' => 'display', 'arguments' => array('ot' => 'collection', 'id' => $this['id'])),
                    'icon' => 'display',
                    'linkTitle' => str_replace('"', '', $this['title']),
                    'linkText' => __('Details', $dom)
                );
            }
            if (in_array($currentFunc, array('main', 'view', 'display'))) {
                    if (SecurityUtil::checkPermission('SimpleMedia:Collection:', $this->id . '::', ACCESS_EDIT)) {
                $this->_actions[] = array(
                    'url' => array('type' => 'admin', 'func' => 'edit', 'arguments' => array('ot' => 'collection', 'id' => $this['id'])),
                    'icon' => 'edit',
                    'linkTitle' => __('Edit', $dom),
                    'linkText' => __('Edit', $dom)
                );
                /*
                        $this->_actions[] = array(
                            'url' => array('type' => 'admin', 'func' => 'edit', 'arguments' => array('ot' => 'collection', 'astemplate' => $this['id'])),
                            'icon' => 'saveas',
                            'linkTitle' => __('Reuse for new item', $dom),
                            'linkText' => __('Reuse', $dom)
                        );
                */
                    }
            }
            if ($currentFunc == 'display') {
                $this->_actions[] = array(
                    'url' => array('type' => 'admin', 'func' => 'view', 'arguments' => array('ot' => 'collection')),
                    'icon' => 'back',
                    'linkTitle' => __('Back to overview', $dom),
                    'linkText' => __('Back to overview', $dom)
                );
            }
        }
        if ($currentType == 'user') {
            if (in_array($currentFunc, array('main', 'view'))) {
                $this->_actions[] = array(
                    'url' => array('type' => 'user', 'func' => 'display', 'arguments' => array('ot' => 'collection', 'id' => $this['id'])),
                    'icon' => 'display',
                    'linkTitle' => str_replace('"', '', $this['title']),
                    'linkText' => __('Details', $dom)
                );
            }
            if (in_array($currentFunc, array('main', 'view', 'display'))) {
            }
            if ($currentFunc == 'display') {
                $this->_actions[] = array(
                    'url' => array('type' => 'user', 'func' => 'view', 'arguments' => array('ot' => 'collection')),
                    'icon' => 'back',
                    'linkTitle' => __('Back to overview', $dom),
                    'linkText' => __('Back to overview', $dom)
                );
            }
        }
    }

    
    /**
     * Post-Process the data after the entity has been constructed by the entity manager.
     * The event happens after the entity has been loaded from database or after a refresh call.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - no access to associations (not initialised yet)
     *
     * @see SimpleMedia_Entity_Collection::postLoadCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostLoadCallback()
    {
        // echo 'loaded a record ...';
        $currentFunc = FormUtil::getPassedValue('func', 'main', 'GETPOST', FILTER_SANITIZE_STRING);
        
        $this['id'] = (int) ((isset($this['id']) && !empty($this['id'])) ? DataUtil::formatForDisplay($this['id']) : 0);
        if ($currentFunc != 'edit') {
            $this['title'] = ((isset($this['title']) && !empty($this['title'])) ? DataUtil::formatForDisplayHTML($this['title']) : '');
        }
        if ($currentFunc != 'edit') {
            $this['description'] = ((isset($this['description']) && !empty($this['description'])) ? DataUtil::formatForDisplayHTML($this['description']) : '');
        }
        $this['previewImage'] = (int) ((isset($this['previewImage']) && !empty($this['previewImage'])) ? DataUtil::formatForDisplay($this['previewImage']) : 0);
        $this['sortValue'] = (int) ((isset($this['sortValue']) && !empty($this['sortValue'])) ? DataUtil::formatForDisplay($this['sortValue']) : 0);
        $this->prepareItemActions();
        return true;
    }
    
    /**
     * Pre-Process the data prior to an insert operation.
     * The event happens before the entity managers persist operation is executed for this entity.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - no identifiers available if using an identity generator like sequences
     *     - Doctrine won't recognize changes on relations which are done here
     *       if this method is called by cascade persist
     *     - no creation of other entities allowed
     *
     * @see SimpleMedia_Entity_Collection::prePersistCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPrePersistCallback()
    {
        // echo 'inserting a record ...';
        $this->validate();
        return true;
    }
    
    /**
     * Post-Process the data after an insert operation.
     * The event happens after the entity has been made persistant.
     * Will be called after the database insert operations.
     * The generated primary key values are available.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *
     * @see SimpleMedia_Entity_Collection::postPersistCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostPersistCallback()
    {
        // echo 'inserted a record ...';
        return true;
    }
    
    /**
     * Pre-Process the data prior a delete operation.
     * The event happens before the entity managers remove operation is executed for this entity.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL DELETE statement
     *
     * @see SimpleMedia_Entity_Collection::preRemoveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPreRemoveCallback()
    {
        // delete workflow for this entity
        /*$result = Zikula_Workflow_Util::deleteWorkflow($this);
        if ($result === false) {
            $dom = ZLanguage::getModuleDomain('SimpleMedia');
            return LogUtil::registerError(__('Error! Could not remove stored workflow.', $dom));
        }*/
        return true;
    }
    
    /**
     * Post-Process the data after a delete.
     * The event happens after the entity has been deleted.
     * Will be called after the database delete operations.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL DELETE statement
     *
     * @see SimpleMedia_Entity_Collection::postRemoveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostRemoveCallback()
    {
        // echo 'deleted a record ...';
        return true;
    }
    
    /**
     * Pre-Process the data prior to an update operation.
     * The event happens before the database update operations for the entity data.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL UPDATE statement
     *     - changes on associations are not allowed and won't be recognized by flush
     *     - changes on properties won't be recognized by flush as well
     *     - no creation of other entities allowed
     *
     * @see SimpleMedia_Entity_Collection::preUpdateCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPreUpdateCallback()
    {
        // echo 'updating a record ...';
        $this->validate();
        return true;
    }
    
    /**
     * Post-Process the data after an update operation.
     * The event happens after the database update operations for the entity data.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL UPDATE statement
     *
     * @see SimpleMedia_Entity_Collection::postUpdateCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostUpdateCallback()
    {
        // echo 'updated a record ...';
        return true;
    }
    
    /**
     * Pre-Process the data prior to a save operation.
     * This combines the PrePersist and PreUpdate events.
     * For more information see corresponding callback handlers.
     *
     * @see SimpleMedia_Entity_Collection::preSaveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPreSaveCallback()
    {
        // echo 'saving a record ...';
        $this->validate();
        return true;
    }
    
    /**
     * Post-Process the data after a save operation.
     * This combines the PostPersist and PostUpdate events.
     * For more information see corresponding callback handlers.
     *
     * @see SimpleMedia_Entity_Collection::postSaveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostSaveCallback()
    {
        // echo 'saved a record ...';
        return true;
    }
    

    /**
     * Clone interceptor implementation.
     * This method is for example called by the reuse functionality.
    * Performs a deep copy. 
     *
     * See also:
     * (1) http://docs.doctrine-project.org/en/latest/cookbook/implementing-wakeup-or-clone.html
     * (2) http://www.sunilb.com/php/php5-oops-tutorial-magic-methods-__clone-method
     * (3) http://stackoverflow.com/questions/185934/how-do-i-create-a-copy-of-an-object-in-php
     */
    public function __clone()
    {
        // If the entity has an identity, proceed as normal.
        if ($this->id) {
            // create new instance
            
            $entity = new SimpleMedia_Entity_Collection();
            // unset identifiers
            $entity->setId(null);
            // copy simple fields
            $entity->setTitle($this->getTitle());
            $entity->setDescription($this->getDescription());
            $entity->setPreviewImage($this->getPreviewImage());
            $entity->setSortValue($this->getSortValue());
    
            // handle related objects
            // prevent shared references by doing a deep copy - see (2) and (3) for more information
            $this->media = clone $this->media;
            $entity->setMedia($this->media);
    
            return $entity;
        }
        // otherwise do nothing, do NOT throw an exception!
    }
}
